export class Item {
    constructor(config: any);
    style: {};
    visibility: {};
    config: any;
    dto: any;
    idx: any;
    inGroupIdx: any;
    container: any;
    cubeType: any;
    cubeImages: any;
    _cubeRatio: any;
    rotatingCropRatios: any;
    smartCrop: any;
    cropOnlyFill: any;
    imageMargin: any;
    galleryMargin: any;
    scatter: any;
    rotatingScatter: any;
    useMaxDimensions: any;
    _groupOffset: {
        top: number;
        left: number;
        right: number;
        bottom: number;
    };
    _group: {};
    calcPinOffset: () => number;
    fixMetadataVerticalVideoRatio(metadata: any): void;
    resize(scaleOrDimensions: any): Item | undefined;
    resized: boolean | undefined;
    pinToCorner(cornerName: any, pinAfter?: boolean): void;
    pin: any;
    isPinnedTop: boolean | undefined;
    isPinnedLeft: boolean | undefined;
    pinAfter: boolean | undefined;
    pinAfterType: string | undefined;
    setPosition(position: any): void;
    getPosition(pos: any): any;
    calcScatter(offset: any): {
        x: any;
        y: any;
    } | undefined;
    get top(): any;
    get left(): any;
    get right(): any;
    get bottom(): any;
    set group(arg: {});
    get group(): {};
    set groupOffset(arg: any);
    get offset(): {
        top: number;
        left: number;
    };
    set id(arg: any);
    get id(): any;
    get hash(): any;
    get seed(): any;
    set maxWidth(arg: any);
    get maxWidth(): any;
    get outerWidth(): number;
    get infoWidth(): any;
    get orgWidth(): any;
    set width(arg: number);
    get width(): number;
    get outerHeight(): number;
    get orgHeight(): any;
    set height(arg: number);
    get height(): number;
    set maxHeight(arg: any);
    get maxHeight(): any;
    get infoHeight(): any;
    set margins(arg: number);
    get margins(): number;
    get dimensions(): {
        fixTop: number;
        fixLeft: number;
    };
    set cubeRatio(arg: number);
    get cubeRatio(): number;
    rotatingCropRatio: string | undefined;
    dynamicCropRatios: ({
        type: string;
        val: number;
        dim: string;
    } | {
        type: string;
        val: number;
        dim?: undefined;
    })[] | null | undefined;
    get orientation(): "portrait" | "landscape";
    get isPortrait(): boolean;
    get isLandscape(): boolean;
    set ratio(arg: any);
    get ratio(): any;
    orgRatio: any;
    get roundedStyle(): {
        width: number;
        height: number;
    };
    get scheme(): {
        id: any;
        idx: any;
        inGroupIdx: any;
        dto: any;
        type: any;
        style: {};
        roundedStyle: {
            width: number;
            height: number;
        };
        width: number;
        maxWidth: any;
        outerWidth: number;
        infoWidth: any;
        margins: number;
        ratio: any;
        dimensions: {
            fixTop: number;
            fixLeft: number;
        };
        cropRatio: number;
        isCropped: any;
        cropType: any;
        height: number;
        maxHeight: any;
        outerHeight: number;
        infoHeight: any;
        group: {};
        offset: {
            top: number;
            left: number;
        };
        groupOffset: {
            top: number;
            left: number;
            right: number;
            bottom: number;
        };
        orientation: string;
        isPortrait: boolean;
        isLandscape: boolean;
        visibility: {};
    };
}
