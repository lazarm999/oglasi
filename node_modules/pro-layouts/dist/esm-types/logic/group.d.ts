export class Group {
    constructor(config: any);
    idx: any;
    stripIdx: any;
    inStripIdx: any;
    top: any;
    showAllItems: any;
    isLastItems: any;
    dummyItems: any[];
    targetItemSize: any;
    set items(arg: any);
    get items(): any;
    oneRow: any;
    cubeType: any;
    cubeImages: any;
    isVertical: any;
    minItemSize: any;
    collageAmount: any;
    collageDensity: any;
    groupTypes: string | undefined;
    rotatingGroupTypes: string | undefined;
    rotatingCropRatios: string | undefined;
    chooseBestGroup: any;
    externalInfoHeight: any;
    externalInfoWidth: any;
    imageMargin: any;
    groupSize: any;
    visible: boolean;
    rendered: boolean;
    required: boolean;
    resize(): void;
    safeGetItem(idx: any): any;
    setCubedHeight(height: any): void;
    cubedHeight: any;
    round(): void;
    width: any;
    set height(arg: any);
    get height(): any;
    getGroupType(forcedGroupSize: any): any;
    calculateRandomSeed(numOfOptions: any): number;
    placeItems(forcedGroupSize: any): void;
    type: any;
    placed: boolean | undefined;
    resizeToHeight(height: any): void;
    resizeToWidth(width: any): void;
    resizeItems(): void;
    getItemDimensions(items: any, idx: any): {
        width: number;
        height?: undefined;
    } | {
        height: number;
        width?: undefined;
    };
    getHeightByWidth(W: any): number;
    getWidthByHeight(H: any): number;
    setTop(top: any): void;
    setLeft(left: any): void;
    left: any;
    get id(): string;
    get ratio(): number;
    _height: any;
    get totalHeight(): any;
    get infoHeight(): any;
    get infoWidth(): any;
    get bottom(): any;
    get right(): any;
    _items: any;
    get realItems(): any;
    get isWithinMinItemSize(): any;
    get scheme(): {
        id: string;
        idx: any;
        stripIdx: any;
        inStripIdx: any;
        isLastGroup: any;
        items: any;
        type: any;
        width: any;
        height: any;
        infoHeight: any;
        infoWidth: any;
        ratio: number;
        top: any;
        left: any;
        right: any;
        bottom: any;
        visible: boolean;
        rendered: boolean;
        required: boolean;
    };
}
