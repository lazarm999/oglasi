export default GalleryItem;
declare class GalleryItem {
    constructor(config: any);
    uniqueId: string;
    isGalleryItem: boolean;
    createdBy: any;
    createUrl(size: any, type: any): any;
    update(config: any): void;
    resizeMediaUrl: any;
    dto: any;
    sharpParams: any;
    thumbnailSize: any;
    processScheme(scheme: any): void;
    id: any;
    idx: any;
    set type(arg: "video" | "text" | "dummy" | "image");
    get type(): "video" | "text" | "dummy" | "image";
    style: any;
    width: any;
    maxWidth: any;
    infoWidth: any;
    height: any;
    maxHeight: any;
    infoHeight: any;
    margins: any;
    ratio: any;
    cubeRatio: any;
    cubeImages: any;
    cubeType: any;
    offset: any;
    group: any;
    orientation: any;
    visibility: any;
    renderProps(config: any): any;
    getDataForShop(): {
        isDemo: any;
        orderIndex: any;
        itemId: any;
        itemUrl: any;
        itemHeight: any;
        title: any;
        itemWidth: any;
        itemType: any;
        imageUrl: any;
        imagePurchasedUrl: any;
        fpX: any;
        fpY: any;
    };
    getHighestMp4Resolution(qualities: any): {
        width: any;
        height: any;
    };
    resizedUrl(resizeMethod: any, requiredWidth: any, requiredHeight: any, sharpParams: any, createMultipleUrls: any): any;
    resetUrls(): void;
    resizeWidth: number | undefined;
    resizeHeight: number | undefined;
    _cachedUrls: {} | undefined;
    urls: {} | undefined;
    get resized_url(): any;
    get multi_url(): any;
    get scaled_url(): any;
    get pixel_url(): any;
    get thumbnail_url(): any;
    get square_url(): any;
    get full_url(): any;
    get sample_url(): any;
    get preload_url(): any;
    get download_url(): any;
    get download_sample_url(): any;
    createDownloadUrl(url: any): any;
    updateSharpParams(): void;
    get itemId(): any;
    updateId(id: any): void;
    get metadata(): any;
    get metaData(): any;
    get bgColor(): any;
    get isCropped(): boolean;
    set focalPoint(arg: any);
    get focalPoint(): any;
    get photoId(): any;
    get key(): any;
    _key: any;
    set orderIndex(arg: any);
    get orderIndex(): any;
    updateOrderIndex(value: any): boolean;
    get url(): any;
    get fileType(): any;
    get mediaUrl(): any;
    get html(): any;
    get lastModified(): any;
    get seed(): any;
    get isImage(): boolean;
    get isImportant(): boolean;
    get videoUrl(): any;
    get poster(): any;
    get qualities(): any;
    get isExternalVideo(): any;
    get isExternal(): boolean;
    _type: string | undefined;
    get isVideoPlaceholder(): boolean;
    set alt(arg: any);
    get alt(): any;
    set title(arg: any);
    get title(): any;
    set fileName(arg: any);
    get fileName(): any;
    set description(arg: any);
    get description(): any;
    get exif(): any;
    get hasLink(): boolean;
    get link(): any;
    set linkData(arg: any);
    get linkData(): any;
    set linkType(arg: any);
    get linkType(): any;
    get defaultLinkText(): any;
    get defaultLinkValue(): any;
    set linkText(arg: any);
    get linkText(): any;
    set linkTitle(arg: any);
    get linkTitle(): any;
    set linkUrl(arg: any);
    get linkUrl(): any;
    get isWixUrl(): boolean;
    get linkTitleFromUrl(): string | null;
    get unprotectedLinkOpenType(): any;
    set linkOpenType(arg: any);
    get linkOpenType(): any;
    get initialLinkObject(): {
        type: string;
        url: undefined;
        text: undefined;
        title: undefined;
        target: string;
    };
    set isDemo(arg: any);
    get isDemo(): any;
    get isText(): boolean;
    get isVideo(): boolean;
    get isVisible(): boolean;
    get isRendered(): boolean;
    get isDimensionless(): boolean;
    get isTransparent(): boolean;
    get directLink(): any;
    get directShareLink(): any;
}
