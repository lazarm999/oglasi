export default _window;
declare const _window: (Window & typeof globalThis) | {
    y: number;
    x: number;
    width: number;
    height: number;
    innerWidth: number;
    innerHeight: number;
    outerWidth: number;
    outerHeight: number;
    clientWidth: number;
    clientHeight: number;
    isMock: boolean;
    isSSR: boolean;
    orientation: number;
    devicePixelRatio: number;
    scrollTop: number;
    addEventListener: () => {};
    removeEventListener: () => {};
    createEvent: () => {};
    CustomEvent: () => {};
    screen: {
        y: number;
        x: number;
        width: number;
        height: number;
        innerWidth: number;
        innerHeight: number;
        outerWidth: number;
        outerHeight: number;
        clientWidth: number;
        clientHeight: number;
    };
    open: () => {};
    petri: {};
    search: {};
    location: {
        href: string;
        protocol: string;
        host: string;
        hostname: string;
        port: string;
        pathname: string;
        search: string;
        hash: string;
    };
    postMessage: () => {};
    requestAnimationFrame: () => {};
    dispatchEvent: () => {};
    document: {
        y: number;
        x: number;
        width: number;
        height: number;
        innerWidth: number;
        innerHeight: number;
        outerWidth: number;
        outerHeight: number;
        clientWidth: number;
        clientHeight: number;
        addEventListener: () => {};
        removeEventListener: () => {};
        createEvent: () => {};
        getElementById: () => {
            getBoundingClientRect: () => {
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
        };
        getElementsByClassName: () => {
            getBoundingClientRect: () => {
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
        }[];
        getElementsByTagName: () => {
            getBoundingClientRect: () => {
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
        }[];
        querySelector: () => {
            getBoundingClientRect: () => {
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
        }[];
        documentElement: {
            getBoundingClientRect: () => {
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
        };
        activeElement: {
            getBoundingClientRect: () => {
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
        };
        style: {
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
        };
    };
    getComputedStyle: () => {};
    localStorage: {};
    frames: never[];
} | undefined;
export const windowWrapper: WindowWrapper;
declare class WindowWrapper {
    windowIsAvailable(): boolean;
    reset(): void;
    isMock: boolean | undefined;
    window: (Window & typeof globalThis) | {
        y: number;
        x: number;
        width: number;
        height: number;
        innerWidth: number;
        innerHeight: number;
        outerWidth: number;
        outerHeight: number;
        clientWidth: number;
        clientHeight: number;
        isMock: boolean;
        isSSR: boolean;
        orientation: number;
        devicePixelRatio: number;
        scrollTop: number;
        addEventListener: () => {};
        removeEventListener: () => {};
        createEvent: () => {};
        CustomEvent: () => {};
        screen: {
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
        };
        open: () => {};
        petri: {};
        search: {};
        location: {
            href: string;
            protocol: string;
            host: string;
            hostname: string;
            port: string;
            pathname: string;
            search: string;
            hash: string;
        };
        postMessage: () => {};
        requestAnimationFrame: () => {};
        dispatchEvent: () => {};
        document: {
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
            addEventListener: () => {};
            removeEventListener: () => {};
            createEvent: () => {};
            getElementById: () => {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            getElementsByClassName: () => {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            }[];
            getElementsByTagName: () => {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            }[];
            querySelector: () => {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            }[];
            documentElement: {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            activeElement: {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            style: {
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
        };
        getComputedStyle: () => {};
        localStorage: {};
        frames: never[];
    } | undefined;
}
