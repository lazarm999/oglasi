"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable prettier/prettier */
var Blueprints_1 = tslib_1.__importDefault(require("./Blueprints"));
var viewModeWrapper_1 = require("../../common/window/viewModeWrapper");
var BlueprintsManager = /** @class */ (function () {
    function BlueprintsManager(_a) {
        var id = _a.id;
        this.id = id + "'s blueprintsManager";
        this.currentState = {};
        this.existingBlueprint = {};
        this.cache = {};
        this.api = {};
        this.currentState.totalItemsCount = Infinity;
        this.onBlueprintReady = function () { };
        this.loopingItems = false;
    }
    BlueprintsManager.prototype.init = function (config) {
        this.api = config.api;
        this.currentState.totalItemsCount =
            (config && config.totalItemsCount) || this.currentState.totalItemsCount;
        viewModeWrapper_1.viewModeWrapper.setFormFactor(config.formFactor);
    };
    BlueprintsManager.prototype.createBlueprint = function (params) {
        if (params === void 0) { params = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _createBlueprint, _b, blueprint, changedParams, blueprintChanged, blueprintCreated;
            var _this = this;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.currentState.totalItemsCount =
                            params.totalItemsCount ||
                                (this.api.getTotalItemsCount && this.api.getTotalItemsCount()) ||
                                this.currentState.totalItemsCount;
                        this.currentState.isUsingCustomInfoElements =
                            params.isUsingCustomInfoElements ||
                                (this.api.isUsingCustomInfoElements &&
                                    this.api.isUsingCustomInfoElements()) ||
                                this.currentState.isUsingCustomInfoElements;
                        _a = [tslib_1.__assign({}, params)];
                        return [4 /*yield*/, this.completeParams(params)];
                    case 1:
                        params = tslib_1.__assign.apply(void 0, _a.concat([(_c.sent())]));
                        _createBlueprint = function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!this.api.createBlueprintImp) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.api.createBlueprintImp(args)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                    case 2: return [4 /*yield*/, Blueprints_1.default.createBlueprint(args)];
                                    case 3: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); };
                        return [4 /*yield*/, _createBlueprint({
                                params: params,
                                lastParams: this.currentState,
                                existingBlueprint: this.existingBlueprint,
                                blueprintManagerId: this.id,
                                isUsingCustomInfoElements: this.currentState.isUsingCustomInfoElements,
                            })];
                    case 2:
                        _b = _c.sent(), blueprint = _b.blueprint, changedParams = _b.changedParams;
                        blueprintChanged = Object.values(changedParams).some(function (changedParam) { return !!changedParam; });
                        blueprintCreated = Object.keys(blueprint).length > 0;
                        this.updateLastParamsIfNeeded(params, changedParams, blueprintCreated);
                        blueprintCreated &&
                            this.api.onBlueprintReady &&
                            this.api.onBlueprintReady({ blueprint: blueprint, blueprintChanged: blueprintChanged });
                        return [2 /*return*/, (this.cache[params] = this.existingBlueprint = blueprint)]; // still returning for awaits... event is !blueprintCreated
                }
            });
        });
    };
    BlueprintsManager.prototype.getMoreItems = function (currentItemLength) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var items;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(currentItemLength < this.currentState.totalItemsCount)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.api.fetchMoreItems(currentItemLength)];
                    case 1:
                        // this.gettingMoreItems = true;
                        items = _a.sent();
                        if (items) {
                            this.createBlueprint({ items: items });
                            // work with the new items...
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        if (this.existingBlueprint.styles.slideshowLoop) {
                            this.duplicateGalleryItems();
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    BlueprintsManager.prototype.resetItemLooping = function () {
        this.loopingItems = false;
    };
    BlueprintsManager.prototype.createInitialBlueprint = function (params) {
        this.currentState.totalItemsCount =
            params.totalItemsCount ||
                (this.api.getTotalItemsCount && this.api.getTotalItemsCount()) ||
                this.currentState.totalItemsCount;
        this.currentState.isUsingCustomInfoElements =
            params.isUsingCustomInfoElements ||
                (this.api.isUsingCustomInfoElements &&
                    this.api.isUsingCustomInfoElements()) ||
                this.currentState.isUsingCustomInfoElements;
        params = this.alignParamNamingOptions(params);
        var _a = Blueprints_1.default.createBlueprint({
            params: params,
            lastParams: this.currentState,
            existingBlueprint: this.existingBlueprint,
            blueprintManagerId: this.id,
            isUsingCustomInfoElements: this.currentState.isUsingCustomInfoElements,
        }), blueprint = _a.blueprint, changedParams = _a.changedParams;
        var blueprintChanged = Object.values(changedParams).some(function (changedParam) { return !!changedParam; });
        var blueprintCreated = Object.keys(blueprint).length > 0;
        this.updateLastParamsIfNeeded(params, changedParams, blueprintCreated);
        blueprintCreated &&
            this.api.onBlueprintReady &&
            this.api.onBlueprintReady({
                blueprint: blueprint,
                blueprintChanged: blueprintChanged,
                initialBlueprint: true,
            });
        return (blueprintCreated &&
            (this.cache[params] = this.existingBlueprint = blueprint));
    };
    BlueprintsManager.prototype.createSingleBlueprint = function (params) {
        if (params === void 0) { params = {}; }
        var isUsingCustomInfoElements = params.isUsingCustomInfoElements;
        params = this.alignParamNamingOptions(params);
        var blueprint = Blueprints_1.default.createBlueprint({
            params: params,
            lastParams: {},
            existingBlueprint: {},
            blueprintManagerId: this.id + '_singleBlueprint',
            isUsingCustomInfoElements: isUsingCustomInfoElements,
        }).blueprint;
        return blueprint;
    };
    BlueprintsManager.prototype.duplicateGalleryItems = function () {
        var _a;
        var items = (_a = this.currentState.items).concat.apply(_a, this.currentState.items.slice(0, this.currentState.totalItemsCount));
        this.loopingItems = true;
        this.createBlueprint({ items: items });
    };
    // ------------------ Get all the needed raw data ---------------------------- //
    BlueprintsManager.prototype.completeParams = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, dimensions, items, styles, domId;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.alignParamNamingOptions(params), dimensions = _a.dimensions, items = _a.items, styles = _a.styles, domId = _a.domId;
                        return [4 /*yield*/, this.fetchDimensionsIfNeeded(dimensions)];
                    case 1:
                        dimensions = _b.sent();
                        return [4 /*yield*/, this.fetchItemsIfNeeded(items)];
                    case 2:
                        items = _b.sent();
                        return [4 /*yield*/, this.fetchStylesIfNeeded(styles)];
                    case 3:
                        styles = _b.sent(); // can be async... TODO
                        return [2 /*return*/, { dimensions: dimensions, items: items, styles: styles, domId: domId }];
                }
            });
        });
    };
    BlueprintsManager.prototype.alignParamNamingOptions = function (params) {
        var _a = params || {}, dimensions = _a.dimensions, container = _a.container, items = _a.items, styles = _a.styles, styleParams = _a.styleParams, options = _a.options, domId = _a.domId;
        styles = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, options), styles), styleParams);
        dimensions = tslib_1.__assign(tslib_1.__assign({}, dimensions), container);
        return { dimensions: dimensions, items: items, styles: styles, domId: domId };
    };
    BlueprintsManager.prototype.fetchDimensionsIfNeeded = function (dimensions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var shouldFetchDimensions, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        shouldFetchDimensions = function (_dimensions) {
                            var should = true;
                            if (_dimensions && Object.keys(_dimensions).length > 0) {
                                should = false;
                            }
                            return should;
                        };
                        if (!shouldFetchDimensions(dimensions)) return [3 /*break*/, 3];
                        _a = this.api.fetchDimensions;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.api.fetchDimensions()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        // dimensions = {yonatanFakeDimensions: true, width: "", height: ""} // TODO - is there something here???
                        dimensions =
                            (_a) ||
                                this.currentState.dimensions;
                        _b.label = 3;
                    case 3: return [2 /*return*/, dimensions];
                }
            });
        });
    };
    BlueprintsManager.prototype.fetchItemsIfNeeded = function (items) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var shouldFetchItems, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        shouldFetchItems = function (_items) {
                            var should = true;
                            if (_items && _items.length > 0) {
                                should = false;
                            }
                            return should;
                        };
                        if (!shouldFetchItems(items)) return [3 /*break*/, 3];
                        _a = !this.loopingItems &&
                            this.api.fetchItems;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.api.fetchItems()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        // items = ['yonatan - fake items'] // getGalleryDataFromServer(); - worker code to be used here.
                        items =
                            (_a) ||
                                this.currentState.items;
                        _b.label = 3;
                    case 3: 
                    // TODO - this.loadItemsDimensionsIfNeeded();
                    return [2 /*return*/, items];
                }
            });
        });
    };
    BlueprintsManager.prototype.fetchStylesIfNeeded = function (styles) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var shouldFetchStyles, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        shouldFetchStyles = function (_styles) {
                            var should = true;
                            if (_styles && Object.keys(_styles).length > 0) {
                                // TODO - should check if they are ready styles and use ClientLib if not?
                                should = false;
                            }
                            return should;
                        };
                        if (!shouldFetchStyles(styles)) return [3 /*break*/, 3];
                        _a = this.api.fetchStyles;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.api.fetchStyles()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        // styles = ['yonatan - fake styles'] // get styles - from SA ; - worker code to be used here.
                        styles =
                            (_a) ||
                                this.currentState.styles;
                        _b.label = 3;
                    case 3: return [2 /*return*/, styles];
                }
            });
        });
    };
    BlueprintsManager.prototype.updateLastParamsIfNeeded = function (_a, changedParams, blueprintCreated) {
        var items = _a.items, dimensions = _a.dimensions, styles = _a.styles;
        if (blueprintCreated) {
            this.currentState.items = changedParams.itemsChanged
                ? items
                : this.currentState.items;
            this.currentState.dimensions = changedParams.containerChanged
                ? tslib_1.__assign({}, dimensions) : this.currentState.dimensions;
            this.currentState.styles = changedParams.stylesChanged
                ? tslib_1.__assign({}, styles) : this.currentState.styles;
        }
    };
    BlueprintsManager.prototype.needMoreItems = function (currentItemLength) {
        this.getMoreItems(currentItemLength);
    };
    return BlueprintsManager;
}());
exports.default = BlueprintsManager;
/* eslint-enable prettier/prettier */
//# sourceMappingURL=BlueprintsManager.js.map