"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInPreset = exports.getLayoutName = exports.NEW_PRESETS = exports.addPresetStyles = void 0;
var tslib_1 = require("tslib");
var layout_1 = tslib_1.__importDefault(require("../../common/constants/layout"));
//#region Imports Layouts
var alternateGallery_1 = require("./alternateGallery");
var bricksGallery_1 = require("./bricksGallery");
var collageGallery_1 = require("./collageGallery");
var fullsizeGallery_1 = require("./fullsizeGallery");
var columnGallery_1 = require("./columnGallery");
var gridGallery_1 = require("./gridGallery");
var magicGallery_1 = require("./magicGallery");
var masonryGallery_1 = require("./masonryGallery");
var mixGallery_1 = require("./mixGallery");
var panoramaGallery_1 = require("./panoramaGallery");
var sliderGallery_1 = require("./sliderGallery");
var slideshowGallery_1 = require("./slideshowGallery");
var thumbnailGallery_1 = require("./thumbnailGallery");
var emptyGallery_1 = require("./emptyGallery");
var designedPresetGallery_1 = require("./designedPresetGallery");
//#endregion Imports
var addPresetStyles = function (styles) {
    var galleryType = styles.galleryType;
    var galleryLayoutV1 = styles.galleryType;
    var galleryLayoutV2 = styles.galleryLayout;
    if (galleryLayoutV1 !== undefined && galleryLayoutV2 === undefined) {
        // legacy layouts - only if galleyrType parameter is specifically defined (i.e. layout had changed)
        switch (galleryType) {
            case '1': // horizontal collage
                return collageGallery_1.createStyles(styles);
            case '2': // grid
                return gridGallery_1.createStyles(styles);
            case '3': // vertical masonry
                return masonryGallery_1.createStyles(styles);
            case '4': // horizontal masonry
                return masonryGallery_1.createStyles(styles);
            case '5': // one column
                return panoramaGallery_1.createStyles(styles);
            case '6': // one row
                return columnGallery_1.createStyles(styles);
            case '7': // slideshow
                return slideshowGallery_1.createStyles(styles);
            case '0': // vertical collage
            default:
                return collageGallery_1.createStyles(styles);
        }
    }
    else {
        // new layouts
        switch (styles.galleryLayout) {
            case layout_1.default.MASONRY:
                return masonryGallery_1.createStyles(styles);
            case layout_1.default.GRID:
                return gridGallery_1.createStyles(styles);
            case layout_1.default.THUMBNAIL:
                return thumbnailGallery_1.createStyles(styles);
            case layout_1.default.SLIDER:
                return sliderGallery_1.createStyles(styles);
            case layout_1.default.SLIDESHOW:
                return slideshowGallery_1.createStyles(styles);
            case layout_1.default.PANORAMA:
                return panoramaGallery_1.createStyles(styles);
            case layout_1.default.COLUMN:
                return columnGallery_1.createStyles(styles);
            case layout_1.default.MAGIC:
                return magicGallery_1.createStyles(styles);
            case layout_1.default.FULLSIZE:
                return fullsizeGallery_1.createStyles(styles);
            case layout_1.default.BRICKS:
                return bricksGallery_1.createStyles(styles);
            case layout_1.default.MIX:
                return mixGallery_1.createStyles(styles);
            case layout_1.default.ALTERNATE:
                return alternateGallery_1.createStyles(styles);
            case layout_1.default.EMPTY:
                return emptyGallery_1.createStyles(styles);
            case layout_1.default.DESIGNED_PRESET:
                return designedPresetGallery_1.createStyles(styles);
            case layout_1.default.COLLAGE:
            default:
                return collageGallery_1.createStyles(styles);
        }
    }
};
exports.addPresetStyles = addPresetStyles;
var NEW_PRESETS = {
    alternate: alternateGallery_1.fixedStyles,
    bricks: bricksGallery_1.fixedStyles,
    collage: collageGallery_1.fixedStyles,
    fullsize: fullsizeGallery_1.fixedStyles,
    column: columnGallery_1.fixedStyles,
    grid: gridGallery_1.fixedStyles,
    magic: magicGallery_1.fixedStyles,
    masonry: masonryGallery_1.fixedStyles,
    mix: mixGallery_1.fixedStyles,
    panorama: panoramaGallery_1.fixedStyles,
    slider: sliderGallery_1.fixedStyles,
    slideshow: slideshowGallery_1.fixedStyles,
    thumbnails: thumbnailGallery_1.fixedStyles,
    empty: emptyGallery_1.fixedStyles,
};
exports.NEW_PRESETS = NEW_PRESETS;
var getLayoutName = function (galleryLayout) {
    var galleyLayoutList = [
        'empty',
        'collage',
        'masonry',
        'grid',
        'thumbnails',
        'slider',
        'slideshow',
        'panorama',
        'column',
        'magic',
        'fullsize',
        'bricks',
        'alternate',
        'mix',
    ];
    return galleyLayoutList[galleryLayout + 1];
};
exports.getLayoutName = getLayoutName;
// returns true if the given param is in the current layout preset
var isInPreset = function (galleryLayout, paramToCheck) {
    var layoutName = getLayoutName(galleryLayout) || 'empty'; // empty for when there is no layout given
    return Object.keys(NEW_PRESETS[layoutName]).includes(paramToCheck);
};
exports.isInPreset = isInPreset;
//# sourceMappingURL=presets.js.map