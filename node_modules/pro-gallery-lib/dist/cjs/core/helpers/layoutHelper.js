"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calcTargetItemSize = void 0;
var tslib_1 = require("tslib");
/* eslint-disable prettier/prettier */
var utils_1 = tslib_1.__importDefault(require("../../common/utils"));
var windowWrapper_1 = tslib_1.__importDefault(require("../../common/window/windowWrapper"));
var versionsHelper_1 = require("./versionsHelper");
var scrollDirection_1 = tslib_1.__importDefault(require("../../common/constants/scrollDirection"));
var placements_1 = tslib_1.__importStar(require("../../common/constants/placements"));
var infoBehaviourOnHover_1 = tslib_1.__importDefault(require("../../common/constants/infoBehaviourOnHover"));
var loadingMode_1 = tslib_1.__importDefault(require("../../common/constants/loadingMode"));
var loadingWithColorMode_1 = tslib_1.__importDefault(require("../../common/constants/loadingWithColorMode"));
var slideAnimations_1 = tslib_1.__importDefault(require("../../common/constants/slideAnimations"));
var gallerySizeType_1 = tslib_1.__importDefault(require("../../common/constants/gallerySizeType"));
var infoType_1 = tslib_1.__importDefault(require("../../common/constants/infoType"));
var textBoxWidthCalculationOptions_1 = tslib_1.__importDefault(require("../../common/constants/textBoxWidthCalculationOptions"));
var layout_1 = tslib_1.__importDefault(require("../../common/constants/layout"));
var arrowsPosition_1 = tslib_1.__importDefault(require("../../common/constants/arrowsPosition"));
exports.calcTargetItemSize = function (styles, smartCalc) {
    if (smartCalc === void 0) { smartCalc = false; }
    if (styles.gallerySizeType === gallerySizeType_1.default.PIXELS &&
        styles.gallerySizePx > 0) {
        return styles.gallerySizePx;
    }
    else if (styles.gallerySizeType === gallerySizeType_1.default.RATIO &&
        styles.gallerySizeRatio > 0) {
        return (((windowWrapper_1.default && windowWrapper_1.default.innerWidth) || 980) * (styles.gallerySizeRatio / 100));
    }
    else {
        return smartCalc ? smartCalc : styles.gallerySize;
    }
};
function processLayouts(styles, customExternalInfoRendererExists) {
    var processedStyles = styles;
    processedStyles.oneRow =
        processedStyles.oneRow ||
            processedStyles.scrollDirection === scrollDirection_1.default.HORIZONTAL;
    var isDesignedPreset = processedStyles.galleryLayout === layout_1.default.DESIGNED_PRESET;
    var setTextUnderline = function (itemFontStyleParam, textDecorationType) {
        /* itemFontStyleParam: itemFontSlideshow / itemDescriptionFontSlideshow / itemFont / itemDescriptionFont
        textDecorationType: textDecorationTitle / textDecorationDesc */
        processedStyles[itemFontStyleParam].value = processedStyles[itemFontStyleParam].value.replace(/^font\s*:\s*/, '');
        processedStyles[itemFontStyleParam].value = processedStyles[itemFontStyleParam].value.replace(/;$/, '');
        if (processedStyles[itemFontStyleParam].value.indexOf('underline') > -1 ||
            processedStyles[itemFontStyleParam].style.underline === true) {
            processedStyles[itemFontStyleParam].value = processedStyles[itemFontStyleParam].value.replace('underline', '');
            processedStyles[textDecorationType] = 'underline';
        }
        else if (processedStyles[itemFontStyleParam].style.underline === false) {
            processedStyles[textDecorationType] = 'none';
        }
    };
    if (utils_1.default.isMobile()) {
        if (isSlideshowFont(processedStyles)) {
            if (!utils_1.default.isUndefined(processedStyles.itemFontSlideshow)) {
                setTextUnderline('itemFontSlideshow', 'textDecorationTitle');
            }
            if (!utils_1.default.isUndefined(processedStyles.itemDescriptionFontSlideshow)) {
                setTextUnderline('itemDescriptionFontSlideshow', 'textDecorationDesc');
            }
        }
        else {
            if (!utils_1.default.isUndefined(processedStyles.itemFont)) {
                setTextUnderline('itemFont', 'textDecorationTitle');
            }
            if (!utils_1.default.isUndefined(processedStyles.itemDescriptionFont)) {
                setTextUnderline('itemDescriptionFont', 'textDecorationDesc');
            }
        }
    }
    if ((!processedStyles.isVertical ||
        processedStyles.groupSize > 1 ||
        (processedStyles.oneRow === true && !isDesignedPreset)) &&
        !processedStyles.isSlider &&
        !processedStyles.isColumns) {
        // Dont allow titlePlacement to be above / below / left / right
        processedStyles.titlePlacement = placements_1.default.SHOW_ON_HOVER;
    }
    // to_wrapper
    if (!placements_1.hasHoverPlacement(processedStyles.titlePlacement) &&
        processedStyles.hoveringBehaviour !== infoBehaviourOnHover_1.default.NEVER_SHOW) {
        processedStyles.hoveringBehaviour = infoBehaviourOnHover_1.default.APPEARS;
    }
    if (processedStyles.imageLoadingMode === loadingMode_1.default.COLOR &&
        processedStyles.imageLoadingWithColorMode ===
            loadingWithColorMode_1.default.MAIN_COLOR) {
        processedStyles.imageLoadingMode = loadingMode_1.default.MAIN_COLOR;
    }
    if (processedStyles.cubeType === 'fit' &&
        (processedStyles.isGrid ||
            processedStyles.hasThumbnails ||
            processedStyles.isSlider ||
            processedStyles.isSlideshow)) {
        processedStyles.itemBorderWidth = 0;
        processedStyles.itemBorderRadius = 0;
        processedStyles.itemEnableShadow = false;
    }
    if (processedStyles.itemEnableShadow) {
        if (processedStyles.oneRow) {
            processedStyles.itemEnableShadow = false;
        }
        else {
            // add galleryMargin to allow the shadow to be seen
            processedStyles.galleryMargin = Math.max(processedStyles.galleryMargin, (processedStyles.itemShadowSize || 0) +
                (processedStyles.itemShadowBlur || 0));
        }
    }
    if (processedStyles.arrowsPosition === arrowsPosition_1.default.OUTSIDE_GALLERY) {
        processedStyles.arrowsPadding = 0;
    }
    if (processedStyles.oneRow) {
        // if oneRow is true, use horizontal layouts only
        processedStyles.isVertical = false;
        // processedStyles.scrollAnimation = SCROLL_ANIMATIONS.NO_EFFECT;
    }
    else {
        processedStyles.slideshowLoop = false; // allow slideshowLoop only for horizontal layouts
    }
    if (!processedStyles.oneRow ||
        processedStyles.groupSize > 1 ||
        !processedStyles.cubeImages) {
        processedStyles.slideAnimation = slideAnimations_1.default.SCROLL;
    }
    if (processedStyles.imageMargin > 0) {
        if (utils_1.default.isMobile()) {
            processedStyles.imageMargin = Math.min(processedStyles.imageMargin, 50); // limit mobile spacing to 50px (25 on each side)
        }
        // processedStyles.imageMargin /= 2;
    }
    if (processedStyles.loadMoreButtonFont && utils_1.default.isMobile()) {
        processedStyles.loadMoreButtonFont.value =
            processedStyles.loadMoreButtonFont.value.replace(/^font\s*:\s*/, '');
        processedStyles.loadMoreButtonFont.value =
            processedStyles.loadMoreButtonFont.value.replace(/;$/, '');
        if (processedStyles.loadMoreButtonFont.value.indexOf('underline') > -1) {
            processedStyles.loadMoreButtonFont.value =
                processedStyles.loadMoreButtonFont.value.replace('underline', '');
            processedStyles.textDecorationLoadMore = 'underline';
        }
        else {
            processedStyles.textDecorationLoadMore = 'none';
        }
    }
    if ((processedStyles.isGrid && !processedStyles.oneRow) ||
        (versionsHelper_1.featureManager.supports.fixedColumnsInMasonry &&
            processedStyles.isMasonry &&
            processedStyles.isVertical)) {
        // if (canSet('numberOfImagesPerRow', 'fixedColumns')) {
        // If toggle is for Items per row, fill the fixedColumns with the number of items
        // If toggle is responsive, make fixedColumns to be 0 or undefined;
        // Show the new controls only on Vertical scroll (one ow is false)
        processedStyles.fixedColumns =
            String(processedStyles.gridStyle) === '1'
                ? Number(processedStyles.numberOfImagesPerRow)
                : 0;
        processedStyles.groupTypes = '1';
        processedStyles.groupSize = 1;
        processedStyles.collageAmount = 0;
        processedStyles.collageDensity = 0;
        // }
    }
    // TODO this needs to split, need to leave the wixStyles assign in the statics section
    if (!utils_1.default.isUndefined(processedStyles.numberOfImagesPerCol) &&
        processedStyles.isGrid &&
        processedStyles.oneRow) {
        processedStyles.fixedColumns = 0;
        switch (processedStyles.numberOfImagesPerCol) {
            case 1:
            default:
                processedStyles.groupTypes = '1';
                processedStyles.groupSize = 1;
                processedStyles.collageAmount = 0;
                processedStyles.collageDensity = 0;
                break;
            case 2:
                processedStyles.groupTypes = '2v';
                processedStyles.groupSize = 2;
                processedStyles.collageAmount = 1;
                processedStyles.collageDensity = 1;
                break;
            case 3:
                processedStyles.groupTypes = '3v';
                processedStyles.groupSize = 3;
                processedStyles.collageAmount = 1;
                processedStyles.collageDensity = 1;
                break;
        }
    }
    // returned to the statics because it was the definition of the object.
    // processedStyles.sharpParams = {
    //   quality: 90,
    //   usm: {}
    // };
    if (processedStyles.forceMobileCustomButton) {
        processedStyles.targetItemSize = Math.round(30 * 8.5 + 150);
        processedStyles.titlePlacement = placements_1.default.SHOW_BELOW;
        processedStyles.galleryLayout = 2;
        processedStyles.fixedColumns = 1;
        processedStyles.numberOfImagesPerRow = 1;
    }
    if (processedStyles.fixedColumns > 0 &&
        utils_1.default.isMobile() &&
        typeof processedStyles.m_numberOfImagesPerRow === 'undefined') {
        processedStyles.fixedColumns = 1;
    }
    // in case a special gallery size was specified, use it
    if (processedStyles.gallerySizeType === gallerySizeType_1.default.PIXELS &&
        processedStyles.gallerySizePx > 0) {
        processedStyles.targetItemSize = processedStyles.gallerySizePx;
    }
    else if (processedStyles.gallerySizeType === gallerySizeType_1.default.RATIO &&
        processedStyles.gallerySizeRatio > 0) {
        processedStyles.targetItemSize =
            ((windowWrapper_1.default && windowWrapper_1.default.innerWidth) || 980) *
                (processedStyles.gallerySizeRatio / 100);
    }
    processedStyles.textBoxHeight = getTextBoxAboveOrBelowHeight(processedStyles, customExternalInfoRendererExists);
    processedStyles.externalInfoHeight = getHeightFromStyleParams(processedStyles, processedStyles.textBoxHeight);
    processedStyles.externalInfoWidth = getTextBoxRightOrLeftWidth(processedStyles, customExternalInfoRendererExists);
    // Handle case of autoplay on ios devices
    if (processedStyles.videoPlay === 'auto' &&
        processedStyles.itemClick === 'nothing' &&
        utils_1.default.isiOS()) {
        processedStyles.videoPlay = 'onClick';
    }
    return processedStyles;
}
function getHeightFromStyleParams(styleParams, textBoxHeight) {
    var additionalHeight = textBoxHeight;
    if (textBoxHeight > 0 &&
        placements_1.hasVerticalPlacement(styleParams.titlePlacement) &&
        styleParams.imageInfoType === infoType_1.default.SEPARATED_BACKGROUND) {
        additionalHeight += styleParams.textImageSpace;
        additionalHeight += styleParams.textBoxBorderWidth * 2;
    }
    return additionalHeight;
}
function getTextBoxRightOrLeftWidth(styleParams, customExternalInfoRendererExists) {
    if (!shouldShowTextRightOrLeft(styleParams, customExternalInfoRendererExists)) {
        return 0;
    }
    var targetItemSize = styleParams.targetItemSize, calculateTextBoxWidthMode = styleParams.calculateTextBoxWidthMode, textBoxWidth = styleParams.textBoxWidth, textBoxWidthPercent = styleParams.textBoxWidthPercent;
    var width = 0;
    if (calculateTextBoxWidthMode === textBoxWidthCalculationOptions_1.default.PERCENT) {
        width = Math.min(100, Math.max(0, textBoxWidthPercent)) / 100;
    }
    else {
        width = Math.min(targetItemSize, textBoxWidth);
    }
    return width;
}
function shouldShowTextRightOrLeft(styleParams, customExternalInfoRendererExists) {
    var oneRow = styleParams.oneRow, isVertical = styleParams.isVertical, groupSize = styleParams.groupSize, titlePlacement = styleParams.titlePlacement;
    var allowedByLayoutConfig = !oneRow && isVertical && groupSize === 1;
    return (allowedByLayoutConfig &&
        placements_1.hasHorizontalPlacement(titlePlacement) &&
        customExternalInfoRendererExists);
}
function getTextBoxAboveOrBelowHeight(styleParams, customExternalInfoRendererExists) {
    if (!shouldShowTextBoxAboveOrBelow(styleParams, customExternalInfoRendererExists)) {
        return 0;
    }
    return styleParams.textBoxHeight;
}
function shouldShowTextBoxAboveOrBelow(styleParams, customExternalInfoRendererExists) {
    return (placements_1.hasVerticalPlacement(styleParams.titlePlacement) &&
        customExternalInfoRendererExists);
}
function isSlideshowFont(styles) {
    var galleryLayout = styles.galleryLayout;
    if (galleryLayout === layout_1.default.SLIDESHOW) {
        return true;
    }
    if (placements_1.hasVerticalPlacement(styles.titlePlacement)) {
        if (galleryLayout === 4 || galleryLayout === 6 || galleryLayout === 7) {
            return true;
        }
        else if (galleryLayout === 1 && styles.isVertical) {
            return true;
        }
        else if (galleryLayout === 2 && styles.scrollDirection !== 1) {
            return true;
        }
    }
    return false;
}
exports.default = processLayouts;
/* eslint-enable prettier/prettier */
//# sourceMappingURL=layoutHelper.js.map