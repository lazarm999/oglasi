"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var index_1 = tslib_1.__importDefault(require("../common/utils/index"));
var pro_layouts_1 = require("pro-layouts");
var resizeMethods_1 = tslib_1.__importDefault(require("../common/constants/resizeMethods"));
var urlTypes_1 = require("../common/constants/urlTypes");
var GalleryItem = /** @class */ (function () {
    function GalleryItem(config) {
        this.uniqueId = index_1.default.generateUUID();
        this.isGalleryItem = true;
        this.createdBy = config.createdBy;
        this.createUrl = this.createUrl.bind(this);
        this.update(config);
    }
    GalleryItem.prototype.update = function (config) {
        this.resizeMediaUrl = config.resizeMediaUrl;
        if (config.dto && config.dto.dto) {
            config.dto = config.dto.dto; // defence patch due to mis-use of item-core
            if (index_1.default.isDev()) {
                console.warn('Item core is created with already existing item core');
            }
        }
        this.dto = tslib_1.__assign({}, config.dto);
        if (config.scheme) {
            this.processScheme(config.scheme);
        }
        else {
            var dto = {};
            Object.assign(dto, this.dto, this.metadata);
            this.processScheme(new pro_layouts_1.Item({ dto: dto }).scheme);
        }
        if (this.dto) {
            var itemMetadata = this.dto.metaData || this.dto.metadata;
            if (itemMetadata) {
                // metadata is encoded encoded, parsed if needed
                this.dto.metaData = index_1.default.parseStringObject(itemMetadata);
            }
        }
        this.sharpParams = tslib_1.__assign({}, config.sharpParams);
        if (!this.sharpParams.quality) {
            this.sharpParams.quality = 90;
        }
        if (!this.sharpParams.usm) {
            this.sharpParams.usm = {};
        }
        this.thumbnailSize = config.thumbnailSize || 120;
        this.resetUrls();
        this.updateSharpParams();
    };
    GalleryItem.prototype.processScheme = function (scheme) {
        this.id = scheme.id;
        this.idx = scheme.idx;
        this.type = scheme.type;
        this.style = scheme.style;
        this.width = scheme.width;
        this.maxWidth = scheme.maxWidth;
        this.infoWidth = scheme.infoWidth;
        this.height = scheme.height;
        this.maxHeight = scheme.maxHeight;
        this.infoHeight = scheme.infoHeight;
        this.margins = scheme.margins;
        this.ratio = scheme.ratio;
        this.cubeRatio = scheme.cropRatio;
        this.cubeImages = scheme.isCropped;
        this.cubeType = scheme.cropType || resizeMethods_1.default.FILL;
        this.offset = scheme.offset;
        this.group = scheme.group;
        this.orientation = scheme.orientation;
        this.visibility = scheme.visibility;
    };
    GalleryItem.prototype.renderProps = function (config) {
        return tslib_1.__assign({ className: 'image', key: this.key, idx: this.idx, photoId: this.photoId, id: this.id, hash: this.id, html: this.html, type: this.type, isVideoPlaceholder: this.isVideoPlaceholder, url: this.url, alt: this.alt, directLink: this.directLink, directShareLink: this.directShareLink, linkUrl: this.linkUrl, linkType: this.linkType, linkOpenType: this.linkOpenType, linkData: this.linkData, title: this.title, fileName: this.fileName, description: this.description, createUrl: this.createUrl, cubeImages: this.cubeImages, cubeType: this.cubeType, cubeRatio: this.cubeRatio, offset: this.offset, style: tslib_1.__assign({ ratio: this.ratio, bgColor: this.bgColor, maxWidth: this.maxWidth, maxHeight: this.maxHeight, infoWidth: this.infoWidth, infoHeight: this.infoHeight, orientation: this.orientation }, this.style), isDemo: this.isDemo, videoUrl: this.videoUrl, isExternalVideo: this.isExternalVideo }, config);
    };
    GalleryItem.prototype.getDataForShop = function () {
        var focalPoint = this.focalPoint;
        var metadata = this.metadata;
        return {
            isDemo: metadata.isDemo,
            orderIndex: this.orderIndex,
            itemId: this.dto.itemId,
            itemUrl: this.url,
            itemHeight: metadata.height,
            title: metadata.title,
            itemWidth: metadata.width,
            itemType: metadata.type || 'image',
            imageUrl: this.resizedUrl(resizeMethods_1.default.FIT, 200, 200, null, null).img(),
            imagePurchasedUrl: this.dto.mediaUrl,
            fpX: focalPoint[0],
            fpY: focalPoint[1],
        };
    };
    GalleryItem.prototype.getHighestMp4Resolution = function (qualities) {
        var mp4s = qualities.filter(function (video) { return video.formats[0] === 'mp4'; });
        var _a = mp4s.sort(function (a, b) { return b.width - a.width; })[0], width = _a.width, height = _a.height;
        return { width: width, height: height };
    };
    GalleryItem.prototype.resizedUrl = function (resizeMethod, requiredWidth, requiredHeight, sharpParams, createMultipleUrls) {
        var _this = this;
        var _a;
        var resizeUrl = function (item, url) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            var resizedUrl;
            if (typeof _this.resizeMediaUrl === 'function') {
                try {
                    var str = String(index_1.default.hashCode(JSON.stringify(tslib_1.__assign({ url: url }, args))));
                    if (!_this._cachedUrls[str]) {
                        _this._cachedUrls[str] =
                            _this.resizeMediaUrl.apply(_this, tslib_1.__spreadArrays([item, url], args, [createMultipleUrls])) || '';
                    }
                    resizedUrl = _this._cachedUrls[str];
                }
                catch (e) {
                    console.error('Cannot create url', e, item, args);
                    resizedUrl = String(url);
                }
            }
            else {
                resizedUrl = String(url);
            }
            return resizedUrl;
        };
        requiredWidth = Math.ceil(requiredWidth);
        requiredHeight = Math.ceil(requiredHeight);
        var thumbSize = 250;
        var focalPoint = resizeMethod === resizeMethods_1.default.FILL && this.isCropped && this.focalPoint;
        var urls = {};
        var imgUrl = this.url;
        if (this.isText) {
            return Object.assign.apply(Object, tslib_1.__spreadArrays([{}], Object.values(urlTypes_1.URL_TYPES).map(function (value) {
                var _a;
                return (_a = {},
                    _a[value] = function () { return ''; },
                    _a);
            })));
        }
        else if (this.isVideo || this.isVideoPlaceholder) {
            imgUrl = (_a = this.poster) === null || _a === void 0 ? void 0 : _a.url;
            if (index_1.default.isExternalUrl(this.url)) {
                urls[urlTypes_1.URL_TYPES.VIDEO] = function () { return _this.url; };
            }
            else {
                urls[urlTypes_1.URL_TYPES.VIDEO] = function () {
                    return resizeUrl(_this, _this.url, resizeMethods_1.default.VIDEO, requiredWidth, requiredHeight);
                };
            }
        }
        urls[urlTypes_1.URL_TYPES.HIGH_RES] = function () {
            return resizeUrl(_this, imgUrl, resizeMethod, requiredWidth, requiredHeight, sharpParams, focalPoint);
        };
        urls[urlTypes_1.URL_TYPES.LOW_RES] = function () {
            return resizeUrl(_this, imgUrl, _this.cubeImages && resizeMethod !== resizeMethods_1.default.FIT
                ? resizeMethods_1.default.FILL
                : resizeMethods_1.default.FIT, thumbSize, thumbSize, tslib_1.__assign(tslib_1.__assign({}, sharpParams), { quality: 30, blur: 30 }), focalPoint);
        };
        urls[urlTypes_1.URL_TYPES.SEO] = function () {
            return urls[urlTypes_1.URL_TYPES.HIGH_RES]().replace(/\.webp$/i, "." + _this.fileType);
        }; // SEO needs the original file type (jpg or png, etc..) instead of .webp, replace does not mutate
        return urls;
    };
    GalleryItem.prototype.resetUrls = function () {
        var maxWidth = this.maxWidth || this.dto.width || this.metadata.width;
        var maxHeight = this.maxHeight || this.dto.height || this.metadata.height;
        this.resizeWidth = Math.min(maxWidth, Math.ceil(this.width));
        this.resizeHeight = Math.min(maxHeight, Math.ceil(this.height));
        this._cachedUrls = {};
        this.urls = {};
    };
    GalleryItem.prototype.createUrl = function (size, type) {
        try {
            return this[size + '_url'][type]();
        }
        catch (e) {
            return '';
        }
    };
    Object.defineProperty(GalleryItem.prototype, "resized_url", {
        get: function () {
            if (!this.urls.resized_url) {
                this.urls.resized_url = this.resizedUrl(this.cubeType, this.resizeWidth, this.resizeHeight, this.sharpParams);
            }
            return this.urls.resized_url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "multi_url", {
        get: function () {
            if (!this.urls.multi_url) {
                this.urls.multi_url = this.resizedUrl(this.cubeType, this.resizeWidth, this.resizeHeight, this.sharpParams, true);
            }
            return this.urls.multi_url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "scaled_url", {
        get: function () {
            if (!this.urls.scaled_url) {
                var orgRatio = this.maxWidth / this.maxHeight;
                var resizedRatio = this.resizeWidth / this.resizeHeight;
                var isOrgWider = resizedRatio < orgRatio;
                this.urls.scaled_url = this.resizedUrl(resizeMethods_1.default.FILL, isOrgWider ? orgRatio * this.resizeHeight : this.resizeWidth, isOrgWider ? this.resizeHeight : this.resizeWidth / orgRatio, this.sharpParams);
            }
            return this.urls.scaled_url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "pixel_url", {
        get: function () {
            if (!this.urls.pixel_url) {
                this.urls.pixel_url = this.resizedUrl(resizeMethods_1.default.FILL, 1, 1, {
                    quality: 5,
                });
            }
            return this.urls.pixel_url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "thumbnail_url", {
        get: function () {
            if (!this.urls.thumbnail_url) {
                this.urls.thumbnail_url = this.resizedUrl(resizeMethods_1.default.FILL, this.thumbnailSize, this.thumbnailSize, { quality: 70 });
            }
            return this.urls.thumbnail_url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "square_url", {
        get: function () {
            if (!this.urls.square_url) {
                this.urls.square_url = this.resizedUrl(resizeMethods_1.default.FILL, 100, 100, {
                    quality: 80,
                });
            }
            return this.urls.square_url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "full_url", {
        get: function () {
            if (!this.urls.full_url) {
                this.urls.full_url = this.resizedUrl(resizeMethods_1.default.FULL, this.maxWidth, this.maxHeight, this.sharpParams);
            }
            return this.urls.full_url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "sample_url", {
        get: function () {
            if (!this.urls.sample_url) {
                this.urls.sample_url = this.resizedUrl(resizeMethods_1.default.FIT, 500, 500, this.sharpParams);
            }
            return this.urls.sample_url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "preload_url", {
        get: function () {
            if (!this.urls.preload_url) {
                this.urls.preload_url = this.resized_url;
            }
            return this.urls.preload_url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "download_url", {
        get: function () {
            return this.createDownloadUrl(this.full_url);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "download_sample_url", {
        get: function () {
            return this.createDownloadUrl(this.sample_url);
        },
        enumerable: false,
        configurable: true
    });
    GalleryItem.prototype.createDownloadUrl = function (url) {
        var _this = this;
        if (!this.urls.download_url) {
            this.urls.download_url = url;
            this.urls.download_url._img = this.urls.download_url.img;
            this.urls.download_url.img = function () {
                var downloadUrl = _this.urls.download_url._img();
                return (downloadUrl +
                    (downloadUrl.includes('?') ? '&' : '?') +
                    ("dn=" + _this.fileName));
            };
        }
        return this.urls.download_url;
    };
    GalleryItem.prototype.updateSharpParams = function () {
        // override sharpParams with item sharpParams
        if (this.dto.metaData &&
            this.dto.metaData.sharpParams &&
            this.dto.metaData.sharpParams.L) {
            var sharpParams = this.dto.metaData.sharpParams.L;
            if (sharpParams.quality && sharpParams.overrideQuality === true) {
                this.sharpParams.quality = sharpParams.quality;
            }
            if (sharpParams.usm && sharpParams.overrideUsm === true) {
                this.sharpParams.usm = sharpParams.usm;
            }
        }
    };
    Object.defineProperty(GalleryItem.prototype, "itemId", {
        get: function () {
            return this.id;
        },
        enumerable: false,
        configurable: true
    });
    GalleryItem.prototype.updateId = function (id) {
        this.dto.itemId = this.id = id;
    };
    Object.defineProperty(GalleryItem.prototype, "metadata", {
        get: function () {
            var md = this.dto.metaData || this.dto.metadata;
            if (index_1.default.isUndefined(md)) {
                // console.error('Item with no metadata' + JSON.stringify(this.dto));
                md = {};
            }
            return md;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "metaData", {
        get: function () {
            return this.metadata;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "bgColor", {
        get: function () {
            var bg;
            if (this.isText) {
                bg =
                    this.metadata &&
                        ((this.metadata.textStyle && this.metadata.textStyle.backgroundColor) ||
                            this.metadata.backgroundColor);
            }
            else {
                bg = 'none';
            }
            return bg;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isCropped", {
        get: function () {
            return this.cubeImages && this.cubeType === resizeMethods_1.default.FILL;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "focalPoint", {
        get: function () {
            return this.metadata.focalPoint || [0.5, 0.5];
        },
        set: function (value) {
            this.metadata.focalPoint = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "photoId", {
        // ----------------------------------------------------------------//
        get: function () {
            return this.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "key", {
        get: function () {
            if (!this._key) {
                this._key = (this.dto.key ||
                    this.id ||
                    this.dto.url ||
                    'no_key_found').replace(/\W/g, '');
            }
            return this._key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "orderIndex", {
        get: function () {
            return this.dto.orderIndex || this.dto.o || 0;
        },
        set: function (value) {
            this.dto.orderIndex = value;
        },
        enumerable: false,
        configurable: true
    });
    GalleryItem.prototype.updateOrderIndex = function (value) {
        var ret = this.orderIndex !== value;
        this.orderIndex = value;
        return ret;
    };
    Object.defineProperty(GalleryItem.prototype, "url", {
        get: function () {
            // todo :change from mediaUrl
            return (this.dto.file_url ||
                this.dto.mediaUrl ||
                this.dto.url ||
                this.dto.src ||
                '');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "fileType", {
        get: function () {
            return this.url.split('.').pop();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "mediaUrl", {
        get: function () {
            return this.url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "html", {
        get: function () {
            return (this.dto.html || this.dto.text || this.metadata.html || this.metadata.text);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "lastModified", {
        get: function () {
            return this.metadata.lastModified;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "seed", {
        get: function () {
            return index_1.default.hashToInt(this.url);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isImage", {
        get: function () {
            return this.type === 'image';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isImportant", {
        get: function () {
            return !!this.dto.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "videoUrl", {
        get: function () {
            return this.metadata.videoUrl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "poster", {
        get: function () {
            return (this.metadata.poster ||
                (this.metadata.customPoster && this.metadata.customPoster) ||
                (this.metadata.posters
                    ? this.metadata.posters[this.metadata.posters.length - 1]
                    : null));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "qualities", {
        get: function () {
            return this.metadata.qualities;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isExternalVideo", {
        get: function () {
            return this.metadata.isExternal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isExternal", {
        get: function () {
            return this.metadata.isExternal === true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "type", {
        get: function () {
            switch (this._type ||
                this.dto.type ||
                this.metadata.type ||
                this.dto.media_type) {
                case 'dummy':
                    return 'dummy';
                case 'v':
                case 'video':
                    return 'video';
                case 'h':
                case 'html':
                case 'text':
                    return 'text';
                case 'i':
                case 'image':
                default:
                    return 'image';
            }
        },
        set: function (type) {
            this._type = type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isVideoPlaceholder", {
        get: function () {
            return !!(this.dto.isVideoPlaceholder ||
                this.metadata.isVideoPlaceholder ||
                this.dto.media_isVideoPlaceholder);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "alt", {
        get: function () {
            return this.metadata.alt || this.title || this.description || '';
        },
        set: function (value) {
            this.metadata.alt = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "title", {
        get: function () {
            return this.metadata.title || '';
        },
        set: function (value) {
            this.metadata.title = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "fileName", {
        get: function () {
            return this.metadata.fileName || 'file';
        },
        set: function (value) {
            this.metadata.fileName = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "description", {
        get: function () {
            return this.metadata.description || '';
            // if (!this.metadata.isDemo) {
            //   return this.metadata.description || '';
            // }
            // return this.getTranslatedValue(this.metadata.description);
        },
        set: function (value) {
            this.metadata.description = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "exif", {
        get: function () {
            return this.metadata.exif || '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "hasLink", {
        get: function () {
            switch (this.linkType) {
                case 'wix':
                    return !!this.linkData.type;
                default:
                    return !!this.linkUrl;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "link", {
        get: function () {
            return this.metadata.link || {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "linkData", {
        get: function () {
            if (this.metadata.link && this.metadata.link.data) {
                return this.metadata.link.data;
            }
            else if (this.isWixUrl) {
                return {
                    type: 'web',
                    url: this.linkUrl,
                };
            }
            else {
                return {};
            }
        },
        set: function (value) {
            if (!this.metadata.link) {
                this.metadata.link = {};
            }
            this.metadata.link.data = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "linkType", {
        get: function () {
            if (this.metadata.link && !index_1.default.isUndefined(this.metadata.link.type)) {
                return this.metadata.link.type;
            }
            else if (this.linkUrl) {
                return 'web';
            }
            else {
                return 'none';
            }
        },
        set: function (value) {
            if (!this.metadata.link) {
                this.metadata.link = {};
            }
            // reset metadata.link when 'none' is selected - that's the way wix galleries work
            this.metadata.link = {
                type: value,
                url: undefined,
                text: undefined,
                title: undefined,
                target: '_blank',
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "defaultLinkText", {
        get: function () {
            var linkData = this.linkData;
            switch (this.linkType) {
                case 'wix':
                    if (linkData) {
                        switch (linkData.type) {
                            case 'PageLink':
                                return "Go to Page " + linkData.pageName;
                            case 'AnchorLink':
                                return "Scroll to " + linkData.anchorName;
                            case 'ExternalLink':
                                return "" + linkData.url;
                            case 'EmailLink':
                                return "Email " + linkData.recipient;
                            case 'PhoneLink':
                                return "Call " + linkData.phoneNumber;
                            case 'DocumentLink':
                                return "Open " + linkData.name;
                            default:
                                return 'Go to Link';
                        }
                    }
                    else {
                        return 'Go to Link';
                    }
                case 'web':
                    return this.linkTitleFromUrl || this.linkUrl;
                case 'page':
                    return this.linkTitle;
                default:
                    return '';
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "defaultLinkValue", {
        get: function () {
            var linkData = this.linkData;
            switch (this.linkType) {
                case 'wix':
                    if (linkData) {
                        switch (linkData.type) {
                            case 'PageLink':
                                if (linkData.pageName) {
                                    return "PAGE - " + linkData.pageName;
                                }
                                else {
                                    return 'PAGE';
                                }
                            case 'AnchorLink':
                                return "ANCHOR - " + linkData.anchorName;
                            case 'ExternalLink':
                                return "LINK - " + linkData.url;
                            case 'EmailLink':
                                return "EMAIL - " + linkData.recipient;
                            case 'PhoneLink':
                                return "PHONE - " + linkData.phoneNumber;
                            case 'DocumentLink':
                                return "DOCUMENT - " + linkData.name;
                            default:
                                return 'Add a Link';
                        }
                    }
                    else {
                        return 'Add a Link';
                    }
                case 'web':
                    return this.linkUrl;
                case 'page':
                    return this.linkTitle;
                default:
                    return '';
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "linkText", {
        get: function () {
            return ((this.metadata.link && this.metadata.link.text) || this.defaultLinkText);
        },
        set: function (value) {
            if (!this.metadata.link) {
                this.metadata.link = {};
            }
            this.metadata.link.text = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "linkTitle", {
        get: function () {
            return this.metadata.link && this.metadata.link.title;
        },
        set: function (value) {
            if (!this.metadata.link) {
                this.metadata.link = {};
            }
            this.metadata.link.title = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "linkUrl", {
        get: function () {
            return this.metadata.link && this.metadata.link.url;
        },
        set: function (value) {
            if (!this.metadata.link) {
                this.metadata.link = {};
            }
            this.metadata.link.url = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isWixUrl", {
        get: function () {
            return this.linkUrl && this.linkUrl.indexOf('wix') === 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "linkTitleFromUrl", {
        get: function () {
            var regex = /[^/]*\.\w+$/g;
            var regexRes = regex.exec(this.linkUrl);
            var match = regexRes && regexRes[0];
            return match && match.split('.')[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "unprotectedLinkOpenType", {
        get: function () {
            return index_1.default.get(this, 'metadata.link.target');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "linkOpenType", {
        get: function () {
            if (this.metadata.link && !index_1.default.isUndefined(this.metadata.link.target)) {
                return this.unprotectedLinkOpenType;
            }
            else if (this.metadata.link &&
                !index_1.default.isUndefined(this.metadata.link.targetBlank)) {
                return this.metadata.link.targetBlank ? '_blank' : '_top';
            }
            else {
                return '_blank';
            }
        },
        set: function (value) {
            if (!this.metadata.link) {
                this.metadata.link = {};
            }
            this.metadata.link.target = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "initialLinkObject", {
        get: function () {
            return {
                type: 'none',
                url: undefined,
                text: undefined,
                title: undefined,
                target: '_blank',
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isDemo", {
        get: function () {
            return (this.metadata.isDemo ||
                this.dto.isDemo ||
                this.metadata.sourceName === 'public' ||
                (this.metadata.tags &&
                    Array.isArray(this.metadata.tags) &&
                    this.metadata.tags.indexOf('_paid') >= 0));
        },
        set: function (val) {
            this.metadata.isDemo = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isText", {
        get: function () {
            return this.type === 'text';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isVideo", {
        get: function () {
            return this.type === 'video';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isVisible", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isRendered", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isDimensionless", {
        get: function () {
            return !(this.maxWidth > 1 || this.maxHeight > 1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "isTransparent", {
        get: function () {
            return (this.url && (this.url.indexOf('.png') > 0 || this.url.indexOf('.gif') > 0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "directLink", {
        get: function () {
            return this.dto.directLink || '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GalleryItem.prototype, "directShareLink", {
        get: function () {
            return this.dto.directShareLink || '';
        },
        enumerable: false,
        configurable: true
    });
    return GalleryItem;
}());
exports.default = GalleryItem;
//# sourceMappingURL=galleryItem.js.map