declare var _default: Utils;
export default _default;
declare class Utils {
    _cache: {};
    _hash2int: {};
    _params: {};
    shouldUseCache(): boolean;
    isUndefined(something: any): boolean;
    dumpCache(): void;
    getOrPutFromCache(fld: any, func: any): any;
    hashToInt(str: any, min: any, max: any): any;
    parseGetParam(val: any, url: any): any;
    stripSlashes(str: any): string;
    parseStringObject(sObj: any): any;
    hashCode(str: any): number;
    isMobileByProps(): any;
    isUserAgentMobile(): any;
    isMobile(): any;
    isTest(): any;
    isLocal(): boolean;
    isDev(): any;
    isVerbose(): boolean;
    isStoreGallery(): any;
    isSSR(): boolean;
    isOOI(): boolean;
    generateUUID(): string;
    isExternalUrl(url: any): boolean;
    isiOS(): any;
    isiPhone(): any;
    isLandscape(): any;
    safeLocalStorage(): (Window & typeof globalThis) | {
        y: number;
        x: number;
        width: number;
        height: number;
        innerWidth: number;
        innerHeight: number;
        outerWidth: number;
        outerHeight: number;
        clientWidth: number;
        clientHeight: number;
        isMock: boolean;
        isSSR: boolean;
        orientation: number;
        devicePixelRatio: number;
        scrollTop: number;
        addEventListener: () => {};
        removeEventListener: () => {};
        createEvent: () => {};
        CustomEvent: () => {};
        screen: {
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
        };
        open: () => {};
        petri: {};
        search: {};
        location: {
            href: string;
            protocol: string;
            host: string;
            hostname: string;
            port: string;
            pathname: string;
            search: string;
            hash: string;
        };
        postMessage: () => {};
        requestAnimationFrame: () => {};
        dispatchEvent: () => {};
        document: {
            y: number;
            x: number;
            width: number;
            height: number;
            innerWidth: number;
            innerHeight: number;
            outerWidth: number;
            outerHeight: number;
            clientWidth: number;
            clientHeight: number;
            addEventListener: () => {};
            removeEventListener: () => {};
            createEvent: () => {};
            getElementById: () => {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            getElementsByClassName: () => {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            }[];
            getElementsByTagName: () => {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            }[];
            querySelector: () => {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            }[];
            documentElement: {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            activeElement: {
                getBoundingClientRect: () => {
                    y: number;
                    x: number;
                    width: number;
                    height: number;
                    innerWidth: number;
                    innerHeight: number;
                    outerWidth: number;
                    outerHeight: number;
                    clientWidth: number;
                    clientHeight: number;
                };
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
            style: {
                y: number;
                x: number;
                width: number;
                height: number;
                innerWidth: number;
                innerHeight: number;
                outerWidth: number;
                outerHeight: number;
                clientWidth: number;
                clientHeight: number;
            };
        };
        getComputedStyle: () => {};
        localStorage: {};
        frames: never[];
    } | Storage | undefined;
    shouldDebug(str: any): boolean;
    deviceHasMemoryIssues(): any;
    getTabIndex(elementName: any): number;
    setStateAndLog(that: any, caller: any, state: any, callback: any): void;
    printableObjectsDiff(obj1: any, obj2: any, prefix?: string): {};
    getScreenWidth(): number;
    getScreenHeight(): number;
    getWindowWidth(): number;
    getMobileEnabledClick(action: any): {
        onTouchEnd: any;
        onClick?: undefined;
    } | {
        onClick: any;
        onTouchEnd?: undefined;
    };
    getTopUrlParam(name: any): any;
    scrollTo(element: any, to: any, duration: any, isHorizontal: any, callback: any): void;
    formatColor(color: any): any;
    logPlaygroundLink(styles: any): void;
    isSingleItemHorizontalDisplay(styles: any): boolean;
    getAriaAttributes({ proGalleryRole, proGalleryRegionLabel }: {
        proGalleryRole: any;
        proGalleryRegionLabel: any;
    }): {
        role: any;
        "aria-label": any;
        "aria-roledescription": string;
    };
    focusGalleryElement(element: any): void;
}
